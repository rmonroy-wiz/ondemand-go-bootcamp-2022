// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	fs "io/fs"
	os "os"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// FileMock is an autogenerated mock type for the File type
type FileMock struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *FileMock) Close() {
	_m.Called()
}

// OpenFile provides a mock function with given fields: flag, perm
func (_m *FileMock) OpenFile(flag int, perm fs.FileMode) (*os.File, error) {
	ret := _m.Called(flag, perm)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(int, fs.FileMode) *os.File); ok {
		r0 = rf(flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, fs.FileMode) error); ok {
		r1 = rf(flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileMock creates a new instance of FileMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileMock(t testing.TB) *FileMock {
	mock := &FileMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
